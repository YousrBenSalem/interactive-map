import React, { useEffect, useState } from "react";
import { ArrowLeft } from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";

import {
  Box,
  Card,
  CardContent,
  TextField,
  Button,
  Grid,
  Typography,
  Container,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
} from "@mui/material";

import MapComponent from "./MapComponent.js";
import MapComponent2 from "./MapComponent1.js";
import TunisiaMap from "./TunisiaMap.js";
import AfricaMap from "./TunisiaMap.js";
import ReasonsMigration from "./ReasonMigration.js";
import WorldMap from "./WorldMap.js";
import WorldMap1 from "./WorldMap1.js";

import GeographyTable from "./GeographyTable.js";
import MountainTable from "./MountainTable.js";
import PieChart from "./PieChart.js";
import MaghrebMap from "./MaghrebMap.js";
import MontagneTable from "./MontagneTable.js";
import PrecipitationMap from "./PrecipitationMap.js";
import PrecipitationTable from "./PrecipitationTable.js";

{
  /*
const TextToSpeech = () => {
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [text, setText] = useState('Bonjour, comment allez-vous ?');
  const [voices, setVoices] = useState([]);
  const [voice, setVoice] = useState(null);
  const synth = window.speechSynthesis;

  // Charger les voix disponibles
  useEffect(() => {
    const loadVoices = () => {
      const availableVoices = synth.getVoices();
      setVoices(availableVoices);
      if (availableVoices.length > 0 && !voice) {
        // S√©lectionner une voix fran√ßaise par d√©faut si disponible
        const arabicVoice  = availableVoices.find(v => v.lang === 'ar-SA');
        setVoice(arabicVoice  || availableVoices[0]);
      }
    };

    loadVoices();
    synth.onvoiceschanged = loadVoices;

    return () => {
      synth.onvoiceschanged = null;
    };
  }, []);

  const speak = () => {
    if (synth.speaking) {
      synth.cancel();
    }

    const utterance = new SpeechSynthesisUtterance(text);

    if (voice) {
      utterance.voice = voice;
    }
    utterance.rate = 1; // Vitesse (0.1 √† 10)
    utterance.pitch = 1; // Hauteur (0 √† 2)
    
    utterance.onstart = () => setIsSpeaking(true);
    utterance.onend = () => setIsSpeaking(false);
    utterance.lang = 'ar-SA';
    synth.speak(utterance);
  };

  const pause = () => {
    synth.pause();
    setIsSpeaking(false);
  };

  const resume = () => {
    synth.resume();
    setIsSpeaking(true);
  };

  const stop = () => {
    synth.cancel();
    setIsSpeaking(false);
  };

  return (
    <div>
      <textarea
        value={text}
        onChange={(e) => setText(e.target.value)}
        rows={4}
        cols={50}
      />
      
      <div>
        <select 
          value={voice?.name} 
          onChange={(e) => setVoice(voices.find(v => v.name === e.target.value))}
        >
          {voices.map((voice) => (
            <option key={voice.name} value={voice.name}>
              {voice.name} ({voice.lang})
            </option>
          ))}
        </select>
      </div>

      <div>
        <button onClick={speak} disabled={isSpeaking}>
          üó£ Lire
        </button>
        <button onClick={pause} disabled={!isSpeaking}>
          ‚è∏ Pause
        </button>
        <button onClick={resume} disabled={isSpeaking}>
          ‚ñ∂ Reprendre
        </button>
        <button onClick={stop} disabled={!isSpeaking}>
          ‚èπ Arr√™ter
        </button>
      </div>
    </div>
  );
};
*/
}

const Course = () => {
    const [showInputs, setShowInputs] = useState(false);

    const toggleInputs = () => {
      setShowInputs(true);
    };
        const toggleInputsReset = () => {
          setShowInputs(false);
        };
  const questions1 = [
    {
      question: "ŸÖÿß ŸáŸä ÿßŸÑŸÜÿ≥ÿ®ÿ© ÿßŸÑÿ™ŸÇÿ±Ÿäÿ®Ÿäÿ© ŸÑŸÖÿ≥ÿßÿ≠ÿ© ÿßŸÑŸÇÿ≥ŸÖ ÿßŸÑŸäÿßÿ®ÿ≥ ŸÖŸÜ ÿ≥ÿ∑ÿ≠ ÿßŸÑÿ£ÿ±ÿ∂ÿü",
      options: ["¬º", "¬Ω", "¬æ", "‚Öõ"],
      correct: 0,
    },
    {
      question: "ÿ£Ÿä ŸÖŸÜ ÿßŸÑÿÆŸäÿßÿ±ÿßÿ™ ÿßŸÑÿ™ÿßŸÑŸäÿ© ŸäŸèŸÖÿ´ŸëŸÑ ÿßŸÑŸÇÿ≥ŸÖ ÿßŸÑŸÖÿßÿ¶Ÿäÿü",
      options: [
        "ÿßŸÑŸÖÿ≠Ÿäÿ∑ÿßÿ™ ŸàÿßŸÑÿ®ÿ≠ÿßÿ±",
        "ÿßŸÑŸÇÿßÿ±ÿßÿ™ ŸÅŸÇÿ∑",
        "ÿßŸÑÿ≥ŸáŸàŸÑ ŸàÿßŸÑŸáÿ∂ÿßÿ®",
        "ÿßŸÑÿ≥ŸÑÿßÿ≥ŸÑ ÿßŸÑÿ¨ÿ®ŸÑŸäÿ©",
      ],
      correct: 0,
    },
    {
      question: "Ÿäÿ∂ŸÖ ÿßŸÑŸÇÿ≥ŸÖ ÿßŸÑŸäÿßÿ®ÿ≥ ŸÖŸÜ ÿ≥ÿ∑ÿ≠ ÿßŸÑÿ£ÿ±ÿ∂.",
      options: ["6 ŸÇÿßÿ±ÿßÿ™", "5 ŸÇÿßÿ±ÿßÿ™", "4 ŸÇÿßÿ±ÿßÿ™", "3 ŸÇÿßÿ±ÿßÿ™"],
      correct: 0,
    },
    {
      question: "ŸÖÿß ÿßÿ≥ŸÖ ÿßŸÑŸÖÿ≠Ÿäÿ∑ ÿßŸÑÿ£ŸÉÿ®ÿ± ÿπŸÑŸâ Ÿàÿ¨Ÿá ÿßŸÑÿ£ÿ±ÿ∂ÿü",
      options: [
        "ÿßŸÑŸÖÿ≠Ÿäÿ∑ ÿßŸÑŸáŸÜÿØŸä",
        "ÿßŸÑŸÖÿ≠Ÿäÿ∑ ÿßŸÑÿ£ÿ∑ŸÑÿ≥Ÿä",
        "ÿßŸÑŸÖÿ≠Ÿäÿ∑ ÿßŸÑŸÖÿ™ÿ¨ŸÖÿØ",
        "ÿßŸÑŸÖÿ≠Ÿäÿ∑ ÿßŸÑŸáÿßÿØŸä",
      ],
      correct: 3,
    },
  ];

  const [selectedAnswers, setSelectedAnswers] = useState(
    Array(questions1.length).fill(null)
  );
  const [showCorrection, setShowCorrection] = useState(false);

  const handleSelect = (qIndex, optionIndex) => {
    const newAnswers = [...selectedAnswers];
    newAnswers[qIndex] = optionIndex;
    setSelectedAnswers(newAnswers);
  };

  const [showAnswers, setShowAnswers] = useState({});
  const [showArrows, setShowArrows] = useState(false);
  // √âtat pour suivre quelles r√©ponses sont visibles
  const [visibleAnswers, setVisibleAnswers] = useState({});

  // Fonction pour basculer l'affichage d'une r√©ponse
  const toggleAnswer1 = (id) => {
    setVisibleAnswers((prev) => ({
      ...prev,
      [id]: !prev[id],
    }));
  };
  // Donn√©es pour les trois colonnes
  const columns = [
    ["ÿßŸÑŸáŸäŸÖŸÑÿßŸäÿß", "ÿ¨ÿ®ŸÑ ÿßŸÑÿ£ŸÜÿ®", "ÿ¨ÿ®ŸÑ ÿßŸÑÿ£ÿ∑ŸÑÿ≥"],

    ["ÿ£Ÿàÿ±Ÿàÿ®ÿß", "ÿ¢ÿ≥Ÿäÿß", "ÿ•ŸÅÿ±ŸäŸÇŸäÿß"],
    ["ÿ∑Ÿàÿ®ŸÇÿßŸÑ", "ÿ•ŸäŸÅÿ±ÿ≥ÿ™", "ÿßŸÑÿ¨ÿ®ŸÑ ÿßŸÑÿ£ÿ®Ÿäÿ∂"],
  ];

  // Configuration des fl√®ches (startY, angle, length)
  const arrowsConfig1 = [
    { startY: "40%", angle: 130, length: 200 },
    { startY: "54%", angle: 180, length: 160 },
    { startY: "66%", angle: 220, length: 210 },
  ];
  const arrowsConfig2 = [
    { startY: "40%", angle: 165, length: 200 },
    { startY: "45%", angle: 195, length: 200 },
    { startY: "76%", angle: 180, length: 200 },
  ];

  // Fonction pour r√©initialiser toutes les r√©ponses
  const resetAll = () => {
    setVisibleAnswers({});
  };

  const reasons = [
    " ÿßŸÑŸÇÿßÿ±ÿ© ÿßŸÑÿ•ŸÅÿ±ŸäŸÇŸäŸëÿ©",
    " ÿßŸÑŸÇÿßÿ±ÿ© ÿßŸÑÿ£ŸÖÿ±ŸäŸÉŸäŸë",
    " ÿßŸÑŸÇÿßÿ±ÿ© ÿßŸÑÿ¢ÿ≥ŸäŸàŸäŸëÿ©",
  ];

  const motivations = ["Ÿáÿ∂ÿßÿ® ÿßŸÑÿµŸäŸÜ", , "Ÿáÿ∂ÿßÿ® ŸÑŸÖŸàŸÜÿØ", "Ÿáÿ∂ÿßÿ® ÿßŸÑÿ®ÿ±ÿßÿ≤ŸäŸÑ"];

  // Configuration des fl√®ches inclin√©es
  const arrowsConfig = [
    { angle: 155, startY: "30%", length: 270 },
    { angle: 195, startY: "35%", length: 260 },
    { angle: 196, startY: "60%", length: 260 },
  ];

  const [studentAnswers, setStudentAnswers] = useState({
    reason1: "",
    reason2: "",
    reason3: "",
    reason4: "",
    reason5: "",
    reason6: "",
  });
  const [studentAnswers1, setStudentAnswers1] = useState({
    reason1: "",
    reason2: "",
    reason3: "",
    reason4: "",
    reason5: "",
    reason6: "",
  });
  const [inputVisible, setInputVisible] = useState({});
  const resetInput = (questionName) => {
    setInputVisible((prev) => ({
      ...prev,
      [questionName]: false,
    }));
  };
  const [studentAnswers2, setStudentAnswers2] = useState({
    reason1: "",
    reason2: "",
    reason3: "",
    reason4: "",
    reason5: "",
    reason6: "",
    reason7: "",
  });
  const correctAnswers1 = {
    reason1: "  ÿ¥ŸÖÿßŸÑ   ",
    reason2: " ŸÜÿµŸÅ ",
    reason3: " ŸàÿÆŸÖÿ≥  ",
    reason4: "  ÿßŸÑŸÇÿßÿ±ÿ©    ",
    reason5: "  ÿßŸÑÿßŸÅÿ±ŸäŸÇŸäÿ©    ",
    reason6: "  ÿ¥ŸÖÿßŸÑÿß    ",
    reason7: " ÿπŸÑŸâ  ",
    reason8: " ÿßŸÑŸÖÿ≠Ÿäÿ∑ ÿßŸÑÿ£ÿ∑ŸÑÿ≥Ÿä  ",
    reason9: "   ŸÖÿµÿ± ŸàÿßŸÑÿ≥ŸàÿØÿßŸÜ     ",
    reason10: "   ÿßŸÑÿ™ÿ¥ÿßÿØ ŸàŸÖÿßŸÑŸä     ",
    reason11: " ŸàÿßŸÑÿ≥ŸäŸÜÿ∫ÿßŸÑ  ",
  };
  const correctAnswers2 = {
    reason1: " ÿßŸÑÿ®ÿ≠ÿ± ÿßŸÑÿ£ÿµŸÅÿ±  ",
    reason2: " ÿßŸÑÿ®ÿ≠ÿ± ÿßŸÑŸÖÿ™Ÿàÿ≥ÿ∑ ",
    reason3: "  ÿ®ÿ≠ÿ± ÿßŸÑÿ¥ŸÖÿßŸÑ ",
    reason4: " ÿ®ÿ≠ÿ± ÿßŸÑÿπÿ±ÿ®  ",
    reason5: " ÿßŸÑÿ®ÿ≠ÿ± ÿßŸÑÿ£ÿ≠ŸÖÿ± ",
    reason6: "ÿßŸÑÿ®ÿ≠ÿ± ÿßŸÑŸÖŸäÿ™ ",
  };
  const correctAnswers3 = {
    reason1: " ÿ•ŸÅÿ±ŸäŸÇŸäÿß  ",
    reason2: "ÿ¢ÿ≥Ÿäÿß   ",
    reason3: "ÿ£Ÿàÿ±Ÿàÿ®ÿß     ",
    reason4: "ÿ£ÿ≥ÿ™ÿ±ÿßŸÑŸäÿß     ",
    reason5: "ÿ£ŸÖÿ±ŸäŸÉÿß     ",
    reason6: "ÿ£ŸÜÿ™ÿßÿ±ŸÉÿ™ŸäŸÉÿß    ",
  };
  const correctAnswers4 = {
    reason1: "ÿßŸÑÿ≥ŸáŸàŸÑ",
    reason2: " ŸàŸáŸä ÿßŸÑÿ£ŸÇŸÑ ÿßŸÜÿ™ÿ¥ÿßÿ±ÿß ŸÅŸä ÿßŸÑŸÖÿ∫ÿ±ÿ® ÿßŸÑÿπÿ±ÿ®Ÿä ŸàŸáŸä ŸÜŸàÿπÿßŸÜ ",
    reason3: " ÿ≥ŸáŸàŸÑ ÿ≥ÿßÿ≠ŸÑŸäÿ©: ÿ∂ŸäŸÇÿ© ŸÉÿ≥ŸáŸàŸÑ ÿßŸÑÿ≥ÿßÿ≠ŸÑ Ÿàÿ≥ŸáŸÑ ÿßŸÑÿ¨ŸÅÿßÿ±ÿ© ÿ®ÿßŸÑÿ®ŸÑÿßÿØ ÿßŸÑÿ™ŸàŸÜÿ≥Ÿäÿ©",
    
    reason5:
      "ÿßŸÑÿ¨ÿ®ÿßŸÑ ŸÅŸä ÿßŸÑŸÖÿ∫ÿ±ÿ® ÿßŸÑÿπÿ±ÿ®Ÿä ÿ≥ŸÑÿ≥ŸÑÿ™ÿßŸÜ ÿ¨ÿ®ŸÑŸäÿ™ÿßŸÜ ŸÖÿ™Ÿàÿßÿ≤Ÿäÿ™ÿßŸÜ ÿ™ÿÆÿ™ÿ±ŸÇÿßŸÜŸá ŸÖŸÜ ÿßŸÑÿ∫ÿ±ÿ® ÿßŸÑŸâ ÿßŸÑÿ¥ÿ±ŸÇ:",
    reason6:
      " ÿ≥ŸÑÿ≥ŸÑÿ© ÿßŸÑÿ£ÿ∑ŸÑÿ≥ ÿßŸÑÿ™ŸÑŸëŸä: ÿ™ÿ®ÿØÿ£ ŸÖŸÜ ÿ£ŸÇÿµŸâ ÿ¥ŸÖÿßŸÑ ÿßŸÑŸÖÿ∫ÿ±ÿ® ŸÑÿ™ŸÖÿ± ÿ®ÿßŸÑÿ¨ÿ≤ÿßÿ¶ÿ± ÿ´ŸÖ ÿ™ÿµŸÑ ÿßŸÑŸâ ÿ¨ÿ®ÿßŸÑ ÿÆŸÖŸäÿ± ÿßŸÑÿ¨ÿ≤ÿßÿ¶ÿ± ",
    reason7:
      "ÿ≥ŸÑÿ≥ŸÑÿ© ÿßŸÑÿ£ÿ∑ŸÑÿ≥ ÿßŸÑÿµÿ≠ÿ±ÿßŸàŸä: ÿπŸÑŸâ ŸÇŸÖŸÖ Ÿáÿ∞Ÿá ÿßŸÑÿ≥ŸÑÿ≥ŸÑÿ© ŸáŸà ÿ¨ÿ®ŸÑ ÿ∑Ÿàÿ®ŸÇÿßŸÑ ÿ®ÿßŸÑŸÖÿ∫ÿ±ÿ® 4165 ŸÖÿå ÿ¨ÿ®ŸÑ ÿßŸÑÿ£Ÿàÿ±ÿßÿ≥ ŸÅŸä ÿßŸÑÿ¨ÿ≤ÿßÿ¶ÿ± 2328 ŸÖ Ÿàÿ¨ÿ®ŸÑ ÿßŸÑÿ¥ÿπÿßŸÜÿ®Ÿä ŸÅŸä ÿ™ŸàŸÜÿ≥ 1544 ŸÖ.  ŸÉŸÖÿß ŸÜÿ¨ÿØ ŸÅŸä ÿßŸÑÿ¨ŸÜŸàÿ® ÿßŸÑÿ¨ÿ≤ÿßÿ¶ÿ± ÿ¨ÿ®ÿßŸÑ ÿßŸÑŸáŸàÿ¨ÿßÿ± ŸàÿßŸÑÿ™Ÿä ÿ™ÿ®ŸÑÿ∫ ÿ£ÿπŸÑŸâ ŸÇŸÖÿ© ÿ®Ÿáÿß ÿ¨ÿ®ŸÑ ÿßŸÑÿ£ÿ≠ÿ¨ÿßÿ± 2918ŸÖ",
    reason8: " ÿßŸÑÿµÿ≠ÿßÿ±Ÿä ",
    
  };

  // Toggle correct answers for a specific question
  const showCorrectAnswers = (questionId) => {
    setShowAnswers((prev) => ({
      ...prev,
      [questionId]: !prev[questionId],
    }));
  };

  // Reset inputs for a specific question
  const resetInputs = (questionId) => {
    setStudentAnswers((prev) => ({
      ...prev,
      [questionId]: "",
    }));
    setShowAnswers((prev) => ({
      ...prev,
      [questionId]: false,
    }));
  };

  // Toggle visibility of all answers
  const toggleAllAnswers = () => {
    setShowAnswers((prev) => !prev);
  };

  // Reset all inputs and hide answers
  const resetAllInputs = () => {
    setStudentAnswers({
      reason1: "",
      reason2: "",
      reason3: "",
      reason4: "",
      reason5: "",
      reason6: "",
    });
    setStudentAnswers1({
      reason1: "",
      reason2: "",
      reason3: "",
      reason4: "",
      reason5: "",
      reason6: "",
    });
    setShowAnswers(false);
  };

  const toggleAnswer = (questionName) => {
    setShowAnswers((prev) => ({
      ...prev,
      [questionName]: !prev[questionName],
    }));
  };
  const showInput = (questionName) => {
    setInputVisible((prev) => ({
      ...prev,
      [questionName]: true,
    }));
  };
  //third quest//
  const [fosfatAnswers, setFosfatAnswers] = useState([
    { country: "ÿ™ŸàŸÜÿ≥", amount: "7566 ÿ£ŸÑŸÅ ÿ∑ŸÜ", rank: "ÿßŸÑÿ´ÿßŸÜŸäÿ©" },
    { country: "ÿßŸÑŸÖÿ∫ÿ±ÿ®", amount: "23028 ÿ£ŸÑŸÅ ÿ∑ŸÜ", rank: "ÿßŸÑÿ£ŸàŸÑŸâ" },
  ]);

  const [naftAnswers, setNaftAnswers] = useState([
    { country: "ÿßŸÑÿ¨ÿ≤ÿßÿ¶ÿ±", amount: "79000 ÿ£ŸÑŸÅ ÿ∑ŸÜ", rank: "ÿßŸÑÿ£ŸàŸÑŸâ" },
    { country: "ŸÑŸäÿ®Ÿäÿß", amount: "70000 ÿ£ŸÑŸÅ ÿ∑ŸÜ", rank: "ÿßŸÑÿ´ÿßŸÜŸäÿ©" },
    { country: "ÿ™ŸàŸÜÿ≥", amount: "3100 ÿ£ŸÑŸÅ ÿ∑ŸÜ", rank: "ÿßŸÑÿ´ÿßŸÑÿ´ÿ©" },
  ]);

  const [hadidAnswers, setHadidAnswers] = useState([
    { country: "ŸÖŸàÿ±Ÿäÿ™ÿßŸÜŸäÿß", amount: "6760 ÿ£ŸÑŸÅ ÿ∑ŸÜ", rank: "ÿßŸÑÿ£ŸàŸÑŸâ" },
    { country: "ÿ™ŸàŸÜÿ≥", amount: "130 ÿ£ŸÑŸÅ ÿ∑ŸÜ", rank: "ÿßŸÑÿ´ÿßŸÜŸäÿ©" },
  ]);

  const [gazAnswers, setGazAnswers] = useState([
    { country: "ÿßŸÑÿ¨ÿ≤ÿßÿ¶ÿ±", amount: "82400 ŸÖŸÑŸäŸàŸÜ ŸÖ ŸÖŸÉÿπÿ®", rank: "ÿßŸÑÿ£ŸàŸÑŸâ" },
    { country: "ŸÑŸäÿ®Ÿäÿß", amount: "8400 ŸÖŸÑŸäŸàŸÜ ŸÖ ŸÖŸÉÿπÿ®", rank: "ÿßŸÑÿ´ÿßŸÜŸäÿ©" },
    { country: "ÿ™ŸàŸÜÿ≥", amount: "239 ŸÖŸÑŸäŸàŸÜ ŸÖ ŸÖŸÉÿπÿ®", rank: "ÿßŸÑÿ´ÿßŸÑÿ´ÿ©" },
  ]);

  const updateFosfat = (index, field, value) => {
    const updatedAnswers = [...fosfatAnswers];
    updatedAnswers[index][field] = value;
    setFosfatAnswers(updatedAnswers);
  };

  const updateNaft = (index, field, value) => {
    const updatedAnswers = [...naftAnswers];
    updatedAnswers[index][field] = value;
    setNaftAnswers(updatedAnswers);
  };

  const updateHadid = (index, field, value) => {
    const updatedAnswers = [...hadidAnswers];
    updatedAnswers[index][field] = value;
    setHadidAnswers(updatedAnswers);
  };

  const updateGaz = (index, field, value) => {
    const updatedAnswers = [...gazAnswers];
    updatedAnswers[index][field] = value;
    setGazAnswers(updatedAnswers);
  };

  const questions = [
    {
      name: "q1",
      text: "ŸáŸÑ ÿ™Ÿàÿ≤Ÿäÿπ ÿßŸÑÿ≥ŸÉÿßŸÜ ŸÅŸä ÿ™ŸàŸÜÿ≥ ŸÖÿ™ÿ≥ÿßŸàŸç ŸÅŸä ÿ¨ŸÖŸäÿπ ÿßŸÑŸÖŸÜÿßÿ∑ŸÇÿü",
      answer: (
        <>
          <span style={{ color: "green" }}>ÿÆÿ∑ÿ£: </span>ÿßŸÑÿ™Ÿàÿ≤ÿπ ÿßŸÑÿ≥ŸÉÿßŸÜŸä ŸÅŸä ÿ™ŸàŸÜÿ≥{" "}
          <span style={{ color: "green" }}>ŸÖÿ™ŸÅÿßŸàÿ™</span> ŸÅŸä ÿ¨ŸÖŸäÿπ ÿßŸÑŸÖŸÜÿßÿ∑ŸÇ
        </>
      ),
    },
    {
      name: "q2",
      text: "ŸáŸÑ ÿ•ŸÇŸÑŸäŸÖ ÿ™ŸàŸÜÿ≥ ŸáŸà ÿßŸÑÿ£ŸÉÿ´ÿ± ŸÉÿ´ÿßŸÅÿ© ÿ®ÿßŸÑÿ≥ŸÉÿßŸÜÿü",
      answer: <div style={{ color: "green" }}>ÿµŸàÿßÿ®</div>,
    },
    {
      name: "q3",
      text: "ŸáŸÑ ÿßŸÑÿ≥ÿ®ÿ® ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿä ŸÑÿ™ÿ±ŸÉŸëÿ≤ ÿßŸÑÿ≥ŸÉÿßŸÜ ŸÅŸä ÿßŸÑŸÖŸÜÿßÿ∑ŸÇ ÿßŸÑÿ≥ÿßÿ≠ŸÑŸäÿ© ŸáŸà ÿ™ŸàŸÅÿ± ŸÖŸàÿßÿØ ÿßŸÑÿ®ŸÜÿßÿ°ÿü",
      answer: (
        <>
          <span style={{ color: "green" }}>ÿÆÿ∑ÿ£: </span>ÿßŸÑÿ≥ÿ®ÿ® ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿä ŸÑÿ™ÿ±ŸÉŸëÿ≤
          ÿßŸÑÿ≥ŸÉÿßŸÜ ŸÅŸä ÿßŸÑŸÖŸÜÿßÿ∑ŸÇ ÿßŸÑÿ≥ÿßÿ≠ŸÑŸäÿ© ŸáŸà{" "}
          <span style={{ color: "green" }}>
            {" "}
            ÿßŸÖÿ™ÿØÿßÿØ ÿßŸÑÿ≥ŸáŸàŸÑ ÿ≠Ÿäÿ´ ÿ™ÿ™ŸÖŸäÿ≤ Ÿáÿ∞Ÿá ÿßŸÑŸÖŸÜÿßÿ∑ŸÇ ÿ®ŸÖŸÜÿßÿÆ ÿ±ÿ∑ÿ®
          </span>
        </>
      ),
    },
  ];

  const [tableAnswers, setTableAnswers] = useState({
    row1: [""],
    row2: [""],
    row3: [""],
    row4: [""],
    row5: [""],
    row6: [""],
  });

  const correctTableAnswers = {
    row1: ["ÿ™ŸàŸÜÿ≥ / ŸÜÿßÿ®ŸÑ"],
    row2: ["ÿ®ŸÜÿ≤ÿ±ÿ™ / ÿ¨ŸÜÿØŸàÿ®ÿ©"],
    row3: ["ÿ≥Ÿàÿ≥ÿ© / ÿßŸÑŸÖŸÜÿ≥ÿ™Ÿäÿ± / ÿßŸÑŸÖŸáÿØŸäÿ© / ÿµŸÅÿßŸÇÿ≥"],
    row4: ["ÿßŸÑŸÇŸäÿ±ŸàÿßŸÜ / ÿßŸÑŸÇÿµÿ±ŸäŸÜ"],
    row5: ["ŸÖÿØŸÜŸäŸÜ"],
    row6: ["ÿ™ÿ∑ÿßŸàŸäŸÜ"],
  };

  const handleTableChange = (rowKey, index, value) => {
    setTableAnswers((prev) => ({
      ...prev,
      [rowKey]: prev[rowKey].map((cell, i) => (i === index ? value : cell)),
    }));
  };

  const handleChange = (event) => {
    const { name, value } = event.target;
    setStudentAnswers((prev) => ({
      ...prev,
      [name]: value, // Update the specific question's answer
    }));
  };
  const [userInputsFrom, setUserInputsFrom] = useState(Array(5).fill(""));
  const [userInputsTo, setUserInputsTo] = useState(Array(5).fill(""));

  const tableData = [
    {
      from: "ÿßŸÑÿ¥ŸÖÿßŸÑ ÿßŸÑÿ∫ÿ±ÿ®Ÿä",
      fromAnswer: "ÿßŸÑÿ¥ŸÖÿßŸÑ ÿßŸÑÿ∫ÿ±ÿ®Ÿä",
      to: "ÿ•ŸÇŸÑŸäŸÖ ÿ™ŸàŸÜÿ≥ ÿßŸÑŸÉÿ®ÿ±Ÿâ",
      toAnswer: "ÿ•ŸÇŸÑŸäŸÖ ÿ™ŸàŸÜÿ≥ ÿßŸÑŸÉÿ®ÿ±Ÿâ",
    },
    {
      from: "ÿßŸÑŸàÿ≥ÿ∑ ÿßŸÑÿ∫ÿ±ÿ®Ÿä",
      fromAnswer: "ÿßŸÑŸàÿ≥ÿ∑ ÿßŸÑÿ∫ÿ±ÿ®Ÿä",
      to: "ÿßŸÑÿ¥ŸÖÿßŸÑ ÿßŸÑÿ¥ÿ±ŸÇŸä",
      toAnswer: "ÿßŸÑÿ¥ŸÖÿßŸÑ ÿßŸÑÿ¥ÿ±ŸÇŸä",
    },
    {
      from: "ÿßŸÑÿ¨ŸÜŸàÿ® (ÿ™ÿ∑ÿßŸàŸäŸÜ)",
      fromAnswer: "ÿßŸÑÿ¨ŸÜŸàÿ® (ÿ™ÿ∑ÿßŸàŸäŸÜ)",
      to: "ÿßŸÑŸàÿ≥ÿ∑ ÿßŸÑÿ¥ÿ±ŸÇŸä",
      toAnswer: "ÿßŸÑŸàÿ≥ÿ∑ ÿßŸÑÿ¥ÿ±ŸÇŸä",
    },
    {
      from: " ",
      fromAnswer: " ",
      to: "ÿßŸÑÿ¨ŸÜŸàÿ® ÿßŸÑÿ∫ÿ±ÿ®Ÿä",
      toAnswer: "ÿßŸÑÿ¨ŸÜŸàÿ® ÿßŸÑÿ∫ÿ±ÿ®Ÿä",
    },
    {
      from: " ",
      fromAnswer: " ",
      to: "ÿßŸÑÿ¨ŸÜŸàÿ® ÿßŸÑÿ¥ÿ±ŸÇŸä",
      toAnswer: "ÿßŸÑÿ¨ŸÜŸàÿ® ÿßŸÑÿ¥ÿ±ŸÇŸä",
    },
  ];

  const [resetInputs1, setResetInputs1] = useState(false);

  const toggleAllAnswers1 = () => {
    setShowAnswers(!showAnswers);
    setResetInputs1(false);
  };

  const resetAllInputs1 = () => {
    setUserInputsFrom(Array(5).fill(""));
    setUserInputsTo(Array(5).fill(""));
    setShowAnswers(false);
    setResetInputs1(true);
  };

  const handleInputFromChange = (index, value) => {
    const newInputs = [...userInputsFrom];
    newInputs[index] = value;
    setUserInputsFrom(newInputs);
  };
  const handleInputToChange = (index, value) => {
    const newInputs = [...userInputsTo];
    newInputs[index] = value;
    setUserInputsTo(newInputs);
  };
  const [fillInTheBlanks1, setFillInTheBlanks1] = useState({
    blank11: "",
    blank21: "",
    blank31: "",
    blank32: "",
    blank33: "",
    blank34: "",
  });

  const correctFillInTheBlanks1 = {
    blank11:
      "ŸÖŸÜ ÿ£ÿ®ÿ±ÿ≤ ÿ£ÿ≥ÿ®ÿßÿ® ÿßŸÑŸáÿ¨ÿ±ÿ© ÿßŸÑÿØÿßÿÆŸÑŸäÿ© ÿ®ÿßŸÑÿ®ŸÑÿßÿØ ÿßŸÑÿ™ŸàŸÜÿ≥Ÿäÿ© ŸáŸä: ŸÖÿµÿßÿ≠ÿ®ÿ© ÿßŸÑÿπÿßÿ¶ŸÑÿ© , ÿßŸÑÿ®ÿ≠ÿ´ ÿπŸÜ ÿπŸÖŸÑ , ÿßŸÑÿØÿ±ÿßÿ≥ÿ© , ÿßŸÑÿ≤Ÿàÿßÿ¨ ",
  };
  const correctFillInTheBlanks14 = {
    blank11:
      "Ô∏è ÿ™ŸàŸÅŸäÿ± ŸÅÿ±ÿµ ÿπŸÖŸÑ ŸÅŸä ÿßŸÑŸÖŸÜÿßÿ∑ŸÇ ÿßŸÑÿØÿßÿÆŸÑŸäÿ©: ÿ≠ÿ™Ÿâ ŸÑÿß Ÿäÿ∂ÿ∑ÿ± ÿßŸÑÿ≥ŸÉÿßŸÜ ŸÑŸÑÿßŸÜÿ™ŸÇÿßŸÑ ÿ•ŸÑŸâ ÿßŸÑŸÖÿØŸÜ ÿßŸÑŸÉÿ®Ÿäÿ±ÿ© ÿ®ÿ≠ÿ´Ÿãÿß ÿπŸÜ ÿπŸÖŸÑ",
    blank12:
      "Ô∏è  Ô∏è ÿ™ÿ≠ÿ≥ŸäŸÜ ÿßŸÑÿÆÿØŸÖÿßÿ™ ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿäÿ© : ŸÖÿ´ŸÑ ÿ®ŸÜÿßÿ° ŸÖÿ≥ÿ™ÿ¥ŸÅŸäÿßÿ™ ŸàŸÖÿØÿßÿ±ÿ≥ ÿ¨ÿØŸäÿØÿ© ŸÑŸäÿπŸäÿ¥ ÿßŸÑŸÜÿßÿ≥ ŸÅŸä ÿ∏ÿ±ŸàŸÅ ÿ£ŸÅÿ∂ŸÑ.    ",
    blank13:
      "Ô∏è   ÿ™ŸÜŸÖŸäÿ© ÿßŸÑŸÖÿ¥ÿßÿ±Ÿäÿπ ÿßŸÑŸÅŸÑÿßÿ≠Ÿäÿ© ŸàÿßŸÑÿµŸÜÿßÿπŸäÿ© ŸÑŸÖÿ≥ÿßÿπÿØÿ© ÿßŸÑÿ≥ŸÉÿßŸÜ ÿπŸÑŸâ ÿßŸÑÿπŸÖŸÑ ŸÅŸä ŸÖŸÜÿßÿ∑ŸÇŸáŸÖ ÿØŸàŸÜ ÿßŸÑÿ≠ÿßÿ¨ÿ© ŸÑŸÑŸáÿ¨ÿ±ÿ©.",
  };

  const handleFillChange1 = (event, key) => {
    setFillInTheBlanks1((prev) => ({ ...prev, [key]: event.target.value }));
  };

  const [fillInTheBlanks, setFillInTheBlanks] = useState({
    blank1: "",
    blank2: "",
    blank3: "",
    blank4: "",
    blank5: "",
    blank6: "",
    blank7: "",
    blank8: "",
  });

  const correctFillInTheBlanks = {
    blank1: "ŸÉÿ´ÿßŸÅÿ© ÿ≥ŸÉÿßŸÜŸäÿ© ŸÖÿ±ÿ™ŸÅÿπÿ© ÿ¨ÿØŸëÿß ",
    blank2: "ŸÉÿ´ÿßŸÅÿ© ÿ≥ŸÉÿßŸÜŸäÿ© ŸÖÿ±ÿ™ŸÅÿπÿ©",
    blank3: "ŸÉÿ´ÿßŸÅÿ© ÿ≥ŸÉÿßŸÜŸäÿ© ÿ∂ÿπŸäŸÅÿ© ",
    blank4: "ÿ®ÿßÿÆÿ™ŸÑÿßŸÅ ÿßŸÑÿ£ŸÇÿ∑ÿßÿ±.",
    blank5: "ŸÉÿ´ÿßŸÅÿ© ÿ≥ŸÉÿßŸÜŸäÿ© ŸÖÿ±ÿ™ŸÅÿπÿ©",
    blank6: "ŸÉÿ´ÿßŸÅÿ© ÿ≥ŸÉÿßŸÜŸäÿ© ŸÖÿ±ÿ™ŸÅÿπÿ©",
    blank7: "ÿßŸÑŸÖŸàÿßÿ±ÿØ ÿßŸÑÿ∑ŸëÿßŸÇŸäŸëÿ©",
    blank8: "ŸÉÿ´ÿßŸÅÿ© ÿ≥ŸÉÿßŸÜŸäÿ© ÿ∂ÿπŸäŸÅÿ© ",
  };

  const handleFillChange = (event, key) => {
    setFillInTheBlanks((prev) => ({ ...prev, [key]: event.target.value }));
  };

  const [trueFalseAnswers, setTrueFalseAnswers] = useState({
    q1: "",
    q2: "",
    q3: "",
  });

  const correctTrueFalseAnswers = {
    q1: "‚ÜêÿÆÿ∑ÿ£: ÿßŸÑÿ™Ÿàÿ≤ÿπ ÿßŸÑÿ≥ŸÉÿßŸÜŸä ÿ®ÿßŸÑÿ®ŸÑÿßÿØ ÿßŸÑÿ™ŸàŸÜÿ≥Ÿäÿ© ŸÖÿ™ŸÅÿßŸàÿ™",
    q2: "‚ÜêÿµŸàÿßÿ®",
    q3: "‚ÜêÿÆÿ∑ÿ£: ŸÖŸÜ ÿ£ÿ®ÿ±ÿ≤ ÿßŸÑÿπŸàÿßŸÖŸÑ ÿßŸÑÿ∑ÿ®ŸäÿπŸäÿ© ÿßŸÑŸÖŸÅÿ≥ÿ±ÿ© ŸÑÿ™ÿ±ŸÉÿ≤ ÿßŸÑÿ≥ŸÉÿßŸÜ ŸÅŸä ÿßŸÑŸÖŸÜÿßÿ∑ŸÇ ÿßŸÑÿ≥ÿßÿ≠ŸÑŸäÿ© ŸáŸà ÿßŸÖÿ™ÿØÿßÿØ ÿßŸÑÿ≥ŸáŸàŸÑ Ÿàÿ™ŸÖŸäÿ≤ Ÿáÿ∞Ÿá ÿßŸÑŸÖŸÜÿßÿ∑ŸÇ ÿ®ŸÖŸÜÿßÿÆ ÿ±ÿ∑ÿ® ",
  };

  const handleTrueFalseChange = (event, key) => {
    setTrueFalseAnswers((prev) => ({ ...prev, [key]: event.target.value }));
  };

  const handleFillChange2 = (event, key) => {
    setFillInTheBlanks2((prev) => ({ ...prev, [key]: event.target.value }));
  };

  const [fillInTheBlanks2, setFillInTheBlanks2] = useState({
    blank111: "",
    blank211: "",
    blank311: "",
    blank321: "",
    blank331: "",
  });

  const correctFillInTheBlanks2 = {
    blank111: "ÿßŸÑŸÖŸÜÿßÿ∑ŸÇ ÿßŸÑÿØÿßÿÆŸÑŸäÿ© ",
    blank211: "ÿßŸÑŸÖŸÜÿßÿ∑ŸÇ ÿßŸÑÿ≥ÿßÿ≠ŸÑŸäÿ© ÿ£Ÿà ÿßŸÑŸÖÿØŸÜ ÿßŸÑŸÉÿ®ÿ±Ÿâ",
    blank311: "ŸÅÿ±ÿµ ÿßŸÑÿπŸÖŸÑ ",
    blank321: "ÿ∏ÿ±ŸàŸÅ ÿßŸÑÿπŸäÿ¥",
    blank331: "ÿ®ŸÑÿØÿßŸÜ ÿ£ÿÆÿ±Ÿâ ",
    blank341: " ŸÅÿ±ŸÜÿ≥ÿß Ÿàÿ•Ÿäÿ∑ÿßŸÑŸäÿß ",
  };
  const correctFillInTheBlanks3 = {
    blank111: "ŸÖÿ™ŸÅÿßŸàÿ™",
    blank211: "ÿßŸÑÿ¥ŸÖÿßŸÑ ÿßŸÑÿ¥ÿ±ŸÇŸä ",
    blank311: "ŸÖŸÜÿÆŸÅÿ∂ÿ© ",
  };

  return (
    <Container
      maxWidth="lg"
      sx={{
        backgroundColor: "transparent", // No extra background
        position: "relative",
        display: "flex",
        flexDirection: "column",
        minHeight: "100vh",
        padding: "20px 80px", // Adjust to fit inside the white space
        overflowY: "auto", // Ensures scrolling within the white area
      }}
    >
      {
        <header
          style={{
            width: "100%",
            backgroundColor: "#F0F0F0",
            boxShadow: "0 4px 6px rgba(0, 0, 0, 0.1)",
            padding: "16px",
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
          }}
        >
          <h2 style={{ fontSize: "20px", fontWeight: "600" }}>
            {" "}
            ÿßŸÑÿØÿ±ÿ≥ ÿßŸÑÿÆÿßŸÖÿ≥ : ÿÆÿµÿßÿ¶ÿµ ÿßŸÑŸÖÿ∫ÿ±ÿ® ÿßŸÑÿπÿ±ÿ®Ÿä ÿßŸÑÿ∑ÿ®ŸäÿπŸäÿ©{" "}
          </h2>
        </header>
      }
      <br></br>
      {/* First Instruction (Before Image) */}
      {/*   <Typography
        variant="h5"
        sx={{
          textAlign: "right",
          fontWeight: "bold",
          mb: 2,
          marginRight: "30px",
        }}
      >
         : ÿßŸÑŸàÿ∂ÿπŸäÿ© ÿßŸÑÿ•ÿ≥ÿ™ŸÉÿ¥ÿßŸÅŸäÿ© 
      </Typography> */}
      {/* Image with Overlay */}
      {/*   <Box
        sx={{
          position: "relative",
          display: "flex",
          justifyContent: "flex-end",
          alignItems: "center",
          width: "65%",
          marginLeft: "auto",
        }}
      >
        <img
          src="/assets/Secondcourse/Rassem_blank.png"
          alt="ÿßŸÑÿπÿ¨ÿ≤ ÿßŸÑÿ∫ÿ∞ÿßÿ¶Ÿä ÿ®ÿßŸÑŸÖÿ∫ÿ±ÿ® ÿßŸÑÿπÿ±ÿ®Ÿä"
          style={{ width: "100%", height: "auto" }}
        />

        {Object.keys(correctAnswers).map((key, index) => {
          const positions = {
            reason1: { top: "45%", right: "26%" },
            reason2: { top: "45%", right: "48%" },
            reason3: { top: "45%", right: "70%" },
            reason4: { top: "45%", right: "89%" },
            reason5: { top: "67%", right: "80%" },
            reason6: { top: "85%", right: "80%" },
          };

          return (
            <Box
              key={index}
              sx={{
                position: "absolute",
                top: positions[key].top,
                right: positions[key].right,
                transform: "translate(50%, -50%)",
                color: "green",
                fontSize: "16px",
                fontWeight: "bold",
                textAlign: "center",
                maxWidth: "120px",
                lineHeight: "1.4",
              }}
            >
              {showAnswers ? (
                <Typography
                  sx={{
                    color: "green",
                    fontSize: "16px",
                    fontWeight: "bold",
                    textAlign: "center",
                    maxWidth: "120px",
                    lineHeight: "1.4",
                  }}
                >
                  {correctAnswers[key]}
                </Typography>
              ) : (
                <TextField
                  name={key}
                  variant="standard"
                  placeholder="............."
                  value={studentAnswers[key]}
                  onChange={(e) =>
                    setStudentAnswers({
                      ...studentAnswers,
                      [key]: e.target.value,
                    })
                  }
                  InputProps={{
                    disableUnderline: true,
                  }}
                  inputProps={{
                    style: { textAlign: "right" },
                    dir: "rtl",
                  }}
                  sx={{
                    width: "90px",
                    height: "40px",
                    textAlign: "right",
                  }}
                />
              )}
            </Box>
          );
        })}
      </Box> */}
      {/* Single Buttons for the Entire Exercise */}
      {/* <Box
        sx={{
          display: "flex",
          gap: 3,
          mt: 2,
          marginLeft: "700px",
          textAlign: "right",
        }}
      >
        <Button
          sx={{
            fontSize: "17px",
            padding: "12px 24px",
            backgroundColor: "#F6D339",
          }}
          variant="contained"
          onClick={resetAllInputs}
        >
          ÿ•ÿπÿßÿØÿ© ÿßŸÑŸÖÿ≠ÿßŸàŸÑÿ©
        </Button>
        <Button
          sx={{
            fontSize: "18px",
            padding: "12px 24px",
            backgroundColor: "#60B463",
          }}
          variant="contained"
          onClick={toggleAllAnswers}
        >
          ÿßŸÑÿ•ÿµŸÑÿßÿ≠
        </Button>
      </Box>

      <br></br>
      <br></br> */}
      {/* Second Instruction (After Image) */}
      <Typography
        variant="h4"
        sx={{
          textAlign: "right",
          fontWeight: "bold",
          mt: 3,
          marginRight: "30px",
          color: "red",
          direction: "rtl",
        }}
      >
        ÿ™ÿπŸáÿØ ÿßŸÑŸÖŸÉÿ™ÿ≥ÿ®ÿßÿ™:{" "}
      </Typography>
      <Typography
        variant="h6"
        sx={{
          textAlign: "right",
          fontWeight: "bold",
          mt: 3,
          marginRight: "30px",
          direction: "rtl",
        }}
      >
        ÿØÿ±ÿ≥ÿ™ŸÖ Ÿäÿß ÿ£ÿ∑ŸÅÿßŸÑ ŸÅŸä ÿßŸÑÿ≠ÿµÿ© ÿßŸÑŸÅÿßÿ±ÿ∑ÿ© ÿØÿ±ÿ≥ ÿßŸÑŸÖÿ∫ÿ±ÿ® ÿßŸÑÿπÿ±ÿ®Ÿä ÿßŸÑŸÖŸàŸÇÿπ ŸàÿßŸÑŸÖÿ≥ÿßÿ≠ÿ©
        ŸàÿßŸÑÿ™ŸÇÿ≥ŸäŸÖ ÿßŸÑÿ≥Ÿäÿßÿ≥Ÿä. ŸáŸäÿß ÿ≠ÿßŸàŸÑŸàÿß ÿ™ÿπŸÖŸäÿ± ÿßŸÑÿÆÿßÿ±ÿ∑ÿ© ÿßŸÑÿ∞ŸáŸÜŸäÿ© ÿßŸÑÿ™ÿßŸÑŸäÿ© ÿßÿ≥ÿ™ŸÜÿßÿØÿß ÿßŸÑŸâ
        ŸÖŸÉÿ™ÿ≥ÿ®ÿßÿ™ŸÉŸÖ ÿßŸÑÿ≥ÿßÿ®ŸÇÿ©:
      </Typography>
      <Box
        sx={{
          position: "relative",
          display: "flex",
          justifyContent: "flex-end",
          alignItems: "center",
          width: "65%",
          marginLeft: "auto",
        }}
      >
        <img
          src="/assets/fifthcourse/Maghreb.jpg"
          alt="    ÿßŸÑŸÖÿ∫ÿ±ÿ® ÿßŸÑÿπÿ±ÿ®Ÿä"
          style={{ width: "100%", height: "auto" }}
        />

        {Object.keys(correctAnswers1).map((key, index) => {
          const positions = {
            reason1: { top: "22%", right: "14%" },
            reason2: { top: "12%", right: "80%" },
            reason3: { top: "20%", right: "80%" },
            reason4: { top: "20%", right: "95%" },
            reason5: { top: "28%", right: "83%" },
            reason6: { top: "72%", right: "14%" },
            reason7: { top: "80%", right: "28%" },
            reason8: { top: "88%", right: "17%" },

            reason9: { top: "70%", right: "87%" },
            reason10: { top: "79%", right: "85%" },
            reason11: { top: "87%", right: "81%" },
          };

          return (
            <Box
              key={index}
              sx={{
                position: "absolute",
                top: positions[key].top,
                right: positions[key].right,
                transform: "translate(50%, -50%)",
                color: "green",
                fontSize: "16px",
                fontWeight: "bold",
                textAlign: "center",
                maxWidth: "120px",
                lineHeight: "1.4",
              }}
            >
              {showAnswers ? (
                <Typography
                  sx={{
                    color: "green",
                    fontSize: "15px",
                    fontWeight: "bold",
                    textAlign: "center",
                    maxWidth: "120px",
                    lineHeight: "1.2",
                  }}
                >
                  {correctAnswers1[key]}
                </Typography>
              ) : (
                <TextField
                  name={key}
                  variant="standard"
                  placeholder="............."
                  value={studentAnswers1[key]}
                  onChange={(e) =>
                    setStudentAnswers1({
                      ...studentAnswers1,
                      [key]: e.target.value,
                    })
                  }
                  InputProps={{
                    disableUnderline: true,
                  }}
                  inputProps={{
                    style: { textAlign: "right" },
                    dir: "rtl",
                  }}
                  sx={{
                    width: "90px",
                    height: "1px",
                    textAlign: "right",
                  }}
                />
              )}
            </Box>
          );
        })}
      </Box>
      {/* Single Buttons for the Entire Exercise */}
      <Box
        sx={{
          display: "flex",
          gap: 3,
          marginLeft: "700px",
          textAlign: "right",
        }}
      >
        <Button
          sx={{
            fontSize: "17px",
            padding: "12px 24px",
            backgroundColor: "#F6D339",
          }}
          variant="contained"
          onClick={resetAllInputs}
        >
          ÿ•ÿπÿßÿØÿ© ÿßŸÑŸÖÿ≠ÿßŸàŸÑÿ©
        </Button>
        <Button
          sx={{
            fontSize: "18px",
            padding: "12px 24px",
            backgroundColor: "#60B463",
          }}
          variant="contained"
          onClick={toggleAllAnswers}
        >
          ÿßŸÑÿ•ÿµŸÑÿßÿ≠
        </Button>
      </Box>
      <Typography
        variant="h4"
        sx={{
          textAlign: "right",
          fontWeight: "bold",
          mt: 3,
          marginRight: "30px",
          color: "red",
          direction: "rtl",
        }}
      >
        ÿßŸÑŸàÿ∂ÿπŸäÿ© ÿßŸÑÿßÿ≥ÿ™ŸÉÿ¥ÿßŸÅŸäÿ©:{" "}
      </Typography>
      <Typography
        variant="h6"
        sx={{
          textAlign: "right",
          fontWeight: "bold",
          mt: 3,
          marginRight: "30px",
          direction: "rtl",
        }}
      >
        ŸÅŸä ÿ£ÿ≠ÿØ ÿ£ŸäÿßŸÖ ÿßŸÑÿπÿ∑ŸÑÿ© ÿ¨ŸÑÿ≥ÿ™ ÿµÿ≠ÿ®ÿ© ÿßÿÆŸäŸÉ ÿßŸÑÿ£ÿµÿ∫ÿ± ÿ£ÿ≠ŸÖÿØ ÿ™ÿ¥ÿßŸáÿØŸàŸÜ ÿ®ÿ±ŸÜÿßŸÖÿ¨ÿß Ÿàÿ´ÿßÿ¶ŸÇŸäÿß ÿπŸÜ
        ŸÇÿßÿ±ÿ© ÿßŸÅÿ±ŸäŸÇŸäÿß ŸäÿØÿπŸâ "ÿßŸÅÿ±ŸäŸÇŸäÿß: ŸÖŸáÿØ ÿßŸÑÿ≠ÿ∂ÿßÿ±ÿßÿ™ ÿßŸÑÿπÿ±ŸäŸÇÿ©". ŸÅŸä ÿ£ÿ≠ÿØ ÿßŸÑŸÖÿ¥ÿßŸáÿØÿå ŸÑÿßÿ≠ÿ™
        ÿ£ŸÖÿßŸÖŸÉŸÖ ÿÆÿ±Ÿäÿ∑ÿ© Ÿáÿ∞Ÿá ÿßŸÑŸÇÿßÿ±ÿ© ŸàŸÇÿØ ŸÉÿßŸÜÿ™ ÿ®ŸÑÿØÿßŸÜ ÿßŸÑŸÖÿ∫ÿ±ÿ® ÿßŸÑÿπÿ±ÿ®Ÿä ŸÖŸÑŸàŸÜÿ© ÿ®ÿßŸÑŸÑŸàŸÜ ÿßŸÑÿ£ÿÆÿ∂ÿ±
        Ÿàÿ≥ŸÖÿπÿ™ŸÖ ÿßŸÑŸÖÿπŸÑŸëŸÇ ŸàŸáŸà ŸäŸÇŸàŸÑ ÿßŸÜ Ÿáÿ∞Ÿá ŸáŸä ÿ®ŸÑÿØÿßŸÜ ÿßŸÑŸÖÿ∫ÿ±ÿ® ÿßŸÑÿπÿ±ÿ®Ÿä ŸàŸáŸä ÿ∞ÿßÿ™{" "}
        <span style={{ color: "purple" }}>ÿÆÿµÿßÿ¶ÿµ ÿ∑ÿ®ŸäÿπŸäÿ© ŸÖÿ™ŸÜŸàÿπÿ© </span>.
        <br />
        ŸÅÿ™ÿ®ÿßÿØÿ±ÿ™ ÿßŸÑŸâ ÿ∞ŸáŸÜ ÿßÿÆŸäŸÉ ÿπÿØŸëÿ© ÿ™ÿ≥ÿßÿ§ŸÑÿßÿ™ÿå ÿ∑ÿ±ÿ≠Ÿáÿß ÿπŸÑŸäŸÉ ÿ®ŸÉŸÑ ŸÅÿ∂ŸàŸÑ:
        <br />
        ŸÖÿßŸáŸä ÿ£ŸÜŸàÿßÿπ ÿßŸÑÿ™ÿ∂ÿßÿ±Ÿäÿ≥ÿü
        <br />
        ÿ®ŸÖÿß Ÿäÿ™ŸÖŸäÿ≤ ŸÖŸÜÿßÿÆ ÿØŸàŸÑ ÿßŸÑŸÖÿ∫ÿ±ÿ® ÿßŸÑÿπÿ±ÿ®Ÿäÿü
        <br />
        ŸáŸÑ ÿ™ÿ∫ÿ∑Ÿä ÿßŸÑÿ∫ÿßÿ®ÿßÿ™ ŸÉÿßŸÖŸÑ ÿßŸÑŸÖÿ∫ÿ±ÿ® ÿßŸÑÿπÿ±ÿ®Ÿäÿü
        <br />
        ÿ≠ÿßŸàŸÑ ÿßŸÑÿ•ÿ¨ÿßÿ®ÿ© ÿπŸÜ ÿ™ÿ≥ÿßÿ§ŸÑÿßÿ™ ÿ£ÿÆŸäŸÉ ÿßŸÑÿ£ÿµÿ∫ÿ±:
        <br />
        ..................................................................................................................................................................................................
      </Typography>
      <Box
        sx={{
          position: "relative",
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          width: "65%",
          margin: "0 auto", // Centre le Box horizontalement
          textAlign: "center",
        }}
      >
        <img
          src="/assets/fifthcourse/image1.jpg"
          alt="ÿßŸÑŸÖÿ∫ÿ±ÿ® ÿßŸÑÿπÿ±ÿ®Ÿä"
          style={{ width: "100%", height: "auto" }}
        />
      </Box>
      <Typography
        variant="h4"
        sx={{
          textAlign: "right",
          fontWeight: "bold",
          mt: 3,
          marginRight: "30px",
          color: "red",
          direction: "rtl",
        }}
      >
        ÿßŸÑÿ™ÿπŸÑŸÖ ÿßŸÑŸÖŸÜŸáÿ¨Ÿä:
      </Typography>
      <Typography
        variant="h6"
        sx={{
          textAlign: "right",
          fontWeight: "bold",
          mt: 3,
          marginRight: "30px",
          direction: "rtl", // Active la direction droite √† gauche
        }}
      >
        ÿ≠ÿ™Ÿâ ÿ™ÿ™ÿ£ŸÉÿØ ŸÖŸÜ ÿµÿ≠ÿ© ÿßÿ¨ÿßÿ®ÿ™ŸÉ Ÿàÿ™ÿ´ÿ±Ÿä ŸÖÿπŸÑŸàŸÖÿßÿ™ŸÉ ÿßŸÑÿ¨ÿ∫ÿ±ÿßŸÅŸäÿ©ÿå ÿ£ÿ®ÿ≠ÿ±ÿ™ ŸÅŸä ÿßŸÑÿ¥ÿ®ŸÉÿ©
        ÿßŸÑÿπŸÜŸÉÿ®Ÿàÿ™Ÿäÿ© ŸÅÿ™ŸÅÿßÿ¨ÿ£ÿ™ ÿ®ŸÖŸàŸÇÿπ ŸäÿØÿπŸä ÿßŸÉÿßÿØŸäŸÖŸäÿ© ÿßŸÑÿ¨ÿ∫ÿ±ÿßŸÅŸäÿß ÿßŸÑÿ™ŸÅÿßÿπŸÑŸäÿ© Ÿäÿ≠ÿ™ŸàŸä ÿ¨ŸÖŸäÿπ
        ÿßŸÑŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑÿ™Ÿä ÿ™ÿ®ÿ≠ÿ´ ÿπŸÜŸáÿß ŸÖÿ±ŸÅŸÇÿ© ÿ®ÿÆÿ±ÿßÿ¶ÿ∑ ÿ™ŸÅÿßÿπŸÑŸäÿ© Ÿàÿ™ŸÖÿßÿ±ŸäŸÜ ŸÖÿ¥ŸàŸÇÿ©.
        <br />
        ÿßÿ™ÿ£ŸÖŸÑ ÿßŸÑÿÆÿ±Ÿäÿ∑ÿ© ÿßŸÑÿ™ŸÅÿßÿπŸÑŸäÿ© ÿßŸÑÿ™ÿßŸÑŸäÿ© Ÿàÿ£ÿ®ÿØŸä ŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™Ÿä:{" "}
      </Typography>
      <div>
        {" "}
        <MaghrebMap />
      </div>
      <Typography
        variant="h6"
        sx={{
          marginTop: "30px",

          textAlign: "right",
          fontWeight: "bold",
          color: "#9AC8EB",
          marginRight: "30px",
          direction: "rtl", // Active la direction droite √† gauche
        }}
      >
        ŸÜÿ¥ÿßÿ∑ 1: ÿ£ŸÉŸÖŸÑ ÿ™ÿπŸÖŸäÿ± ÿßŸÑÿ¨ÿØŸàŸÑ ÿßŸÜÿ∑ŸÑÿßŸÇÿß ŸÖŸÜ ÿßŸÑŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑÿ™Ÿä ÿßŸÉÿ™ÿ¥ŸÅÿ™Ÿáÿß ŸÅŸä ÿßŸÑÿÆÿ±Ÿäÿ∑ÿ©
        ÿßŸÑÿ™ŸÅÿßÿπŸÑŸäÿ©:
      </Typography>
      <MontagneTable />
      <Typography
        variant="h6"
        sx={{
          textAlign: "right",
          fontWeight: "bold",
          direction: "rtl",
          color: "#9AC8EB",
          marginRight: "30px",
          marginTop: "40px",
          // Active la direction droite √† gauche
        }}
      >
        ŸÜÿ¥ÿßÿ∑2: ÿ£ŸÑÿßÿ≠ÿ∏ ÿßŸÑÿµŸàÿ± ÿßŸÑÿ™ÿßŸÑŸäÿ© Ÿàÿ£ÿ≠ÿßŸàŸÑ ÿ™ÿπÿ±ŸäŸÅ ŸÉŸÑ ŸÖŸÜ ÿßŸÑÿπÿ±ŸÇÿå ÿßŸÑÿ≠ŸÖÿßÿØÿ©ÿå ÿßŸÑŸáÿ∂ÿ®ÿ© ŸÅŸä
        ÿßŸÑÿ®ÿ∑ÿßŸÇÿßÿ™ ÿßŸÑŸÖŸÇÿØŸëŸÖÿ©:
      </Typography>
      <div style={{ padding: "20px" }}>
        <div
          style={{
            display: "flex",
            flexDirection: "column",
            gap: "20px",
          }}
        >
          {/* Ligne 1 */}
          <div
            style={{
              display: "flex",
              justifyContent: "space-between",
              alignItems: "center",
              border: "1px solid #ddd",
              padding: "10px",
              borderRadius: "5px",
            }}
          >
            <div style={{ width: "30%" }}>
              {!showInputs ? (
                <input
                  type="text"
                  placeholder="ÿ£ÿØÿÆŸÑ ÿ•ÿ¨ÿßÿ®ÿ™ŸÉ ŸáŸÜÿß"
                  style={{
                    width: "100%",
                    color: "green",
                    padding: "8px",
                    borderRadius: "4px",
                    border: "1px solid #ddd",
                  }}
                />
              ) : (
                <p
                  style={{
                    color: "green",
                    textAlign: "right",
                    fontWeight: "bold",
                    direction: "rtl",
                  }}
                >
                  ÿπÿ®ÿßÿ±ÿ© ÿπŸÜ ŸÉÿ´ÿ®ÿßŸÜ ÿ±ŸÖŸÑŸäÿ© ŸÖŸÜÿ®ÿ≥ÿ∑ÿ©
                </p>
              )}
            </div>
            <div style={{ width: "30%" }}>
              <p
                style={{
                  textAlign: "right",
                  fontWeight: "bold",
                  direction: "rtl",
                }}
              >
                ÿßŸÑÿπÿ±ŸÇ
              </p>
            </div>
            <div style={{ width: "30%" }}>
              {/* Image pour ÿßŸÑÿπÿ±ŸÇ */}
              <img
                src="/assets/fifthcourse/ere9.jpg"
                alt="ÿßŸÑÿπÿ±ŸÇ"
                style={{ width: "100%", height: "auto" }}
              />
            </div>
          </div>

          {/* Ligne 2 */}
          <div
            style={{
              display: "flex",
              justifyContent: "space-between",
              alignItems: "center",
              border: "1px solid #ddd",
              padding: "10px",
              borderRadius: "5px",
            }}
          >
            <div style={{ width: "30%" }}>
              {!showInputs ? (
                <input
                  type="text"
                  placeholder="ÿ£ÿØÿÆŸÑ ÿ•ÿ¨ÿßÿ®ÿ™ŸÉ ŸáŸÜÿß"
                  style={{
                    width: "100%",
                    padding: "8px",
                    borderRadius: "4px",
                    border: "1px solid #ddd",
                  }}
                />
              ) : (
                <p
                  style={{
                    color: "green",
                    textAlign: "right",
                    fontWeight: "bold",
                    direction: "rtl",
                  }}
                >
                  ÿπÿ®ÿßÿ±ÿ© ÿπŸÜ ÿ£ÿ≥ÿ∑ÿ≠ ŸÖÿ±ÿ™ŸÅÿπÿ© ÿ£ÿ≠ŸäÿßŸÜÿß ŸàŸÖŸÜÿ®ÿ≥ÿ∑ÿ© ÿ£ÿÆÿ±Ÿâ Ÿàÿ™ÿ™ŸÖŸäÿ≤ ÿ®ŸÖŸÑŸÖÿ≥Ÿáÿß ÿßŸÑÿµÿÆÿ±Ÿä
                </p>
              )}
            </div>
            <div style={{ width: "30%" }}>
              <p
                style={{
                  textAlign: "right",
                  fontWeight: "bold",
                  direction: "rtl",
                }}
              >
                ÿßŸÑÿ≠ŸÖÿßÿØÿ©
              </p>
            </div>
            <div style={{ width: "30%" }}>
              {/* Image pour ÿßŸÑÿ≠ŸÖÿßÿØÿ© */}
              <img
                src="/assets/fifthcourse/hmeda.jpg"
                alt="ÿßŸÑÿ≠ŸÖÿßÿØÿ©"
                style={{ width: "100%", height: "auto" }}
              />
            </div>
          </div>

          {/* Ligne 3 */}
          <div
            style={{
              display: "flex",
              justifyContent: "space-between",
              alignItems: "center",
              border: "1px solid #ddd",
              padding: "10px",
              borderRadius: "5px",
            }}
          >
            <div style={{ width: "30%" }}>
              {!showInputs ? (
                <input
                  type="text"
                  placeholder="ÿ£ÿØÿÆŸÑ ÿ•ÿ¨ÿßÿ®ÿ™ŸÉ ŸáŸÜÿß"
                  style={{
                    width: "100%",
                    padding: "8px",
                    borderRadius: "4px",
                    border: "1px solid #ddd",
                  }}
                />
              ) : (
                <p
                  style={{
                    color: "green",
                    textAlign: "right",
                    fontWeight: "bold",
                    direction: "rtl",
                  }}
                >
                  ÿ™ÿ∂ÿßÿ±Ÿäÿ≥ ŸÖÿ±ÿ™ŸÅÿπÿ© ÿ®ÿπÿ∂ ÿßŸÑÿ¥Ÿäÿ° ÿπŸÜ ÿ≥ÿ∑ÿ≠ ÿßŸÑÿ£ÿ±ÿ∂ ÿ™ŸÖÿØÿØ ÿßŸÑŸâ ÿ£ŸÜ ÿ™ÿµŸÑ ÿßŸÑŸâ ÿ™ŸÜÿ™ŸáŸä
                  ÿ®ŸÇŸÖŸÖ ÿ¨ÿ®ÿßŸÑ ÿßŸà ÿ™ŸÑÿßŸÑ ŸàŸäÿ™ÿÆŸÑŸÑŸáÿß ÿ®ÿπÿ∂ ÿßŸÑÿ£ŸàÿØŸäÿ© ÿßŸÑÿ™Ÿä ÿ™ŸÉŸàŸÜ ŸÅŸä ÿßŸÑÿ∫ÿßŸÑÿ®
                  ÿ¨ÿßŸÅÿ©
                </p>
              )}
            </div>

            <div style={{ width: "30%" }}>
              <p
                style={{
                  textAlign: "right",
                  fontWeight: "bold",
                  direction: "rtl",
                }}
              >
                ÿßŸÑŸáÿ∂ÿ®ÿ©
              </p>
            </div>
            <div style={{ width: "30%" }}>
              {/* Image pour ÿßŸÑŸáÿ∂ÿ®ÿ© */}
              <img
                src="/assets/fifthcourse/hadhba.jpg"
                alt="ÿßŸÑŸáÿ∂ÿ®ÿ©"
                style={{ width: "100%", height: "auto" }}
              />
            </div>
          </div>
        </div>
      </div>
      <div
        style={{
          display: "flex",
          justifyContent: "center",
          gap: "20px",
          marginTop: "20px",
        }}
      >
        <Button
          sx={{
            fontSize: "17px",
            padding: "12px 24px",
            backgroundColor: "#F6D339",
            "&:hover": { backgroundColor: "#e6c233" },
          }}
          variant="contained"
          onClick={toggleInputsReset}
        >
          ÿ•ÿπÿßÿØÿ© ÿßŸÑŸÖÿ≠ÿßŸàŸÑÿ©
        </Button>
        <Button
          sx={{
            fontSize: "18px",
            padding: "12px 24px",
            backgroundColor: "#60B463",
            "&:hover": { backgroundColor: "#4fa352" },
          }}
          variant="contained"
          onClick={toggleInputs}
        >
          ÿßŸÑÿ•ÿµŸÑÿßÿ≠
        </Button>
      </div>
      <Typography
        variant="h4"
        sx={{
          textAlign: "right",
          fontWeight: "bold",
          mt: 3,
          marginRight: "30px",
          color: "red",
          direction: "rtl", // Active la direction droite √† gauche
        }}
      >
        ÿßŸÑÿßÿ≥ÿ™ŸÜÿ™ÿßÿ¨ :{" "}
      </Typography>
      <Typography
        variant="h6"
        sx={{
          textAlign: "right",
          fontWeight: "bold",
          color: "#9AC8EB",
          marginRight: "30px",
          marginTop: "30px",
          direction: "rtl", // Active la direction droite √† gauche
        }}
      >
        ÿ£ŸàÿßÿµŸÑ ÿ™ÿπŸÖŸäÿ± ÿßŸÑÿÆÿßÿ±ÿ∑ÿ© ÿßŸÑÿ∞ŸáŸÜŸäÿ© ÿßŸÑÿ™ÿßŸÑŸäÿ© ÿßÿ≥ÿ™ŸÜÿßÿØÿß ÿßŸÑŸâ ÿßŸÑŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑÿ™Ÿä ÿ™ÿπÿ±ŸÅÿ™
        ÿπŸÑŸäŸáÿß:
      </Typography>
      <Box
        sx={{
          position: "relative",
          display: "flex",
          justifyContent: "flex-end",
          alignItems: "center",
          width: "65%",
          marginLeft: "auto",
          marginTop: "20px",
        }}
      >
        <img
          src="/assets/fifthcourse/tadharyse.jpg"
          alt="  ÿßŸÑÿ™ÿ∂ÿßÿ±Ÿäÿ≥ ŸÅŸä ÿßŸÑŸÖÿ∫ÿ±ÿ® ÿßŸÑÿπÿ±ÿ®Ÿä   "
          style={{ width: "100%", height: "auto" }}
        />

        {Object.keys(correctAnswers4).map((key, index) => {
          const positions = {
            reason1: { top: "19%", right: "10%" },
            reason2: { top: "41%", right: "10%" },
            reason3: { top: "75%", right: "9%" },

            reason5: { top: "43%", right: "63%" },
            reason6: { top: "80%", right: "49%" },
            reason7: { top: "84%", right: "80%" },

            reason8: { top: "20%", right: "89%" },
          };

          return (
            <Box
              key={index}
              sx={{
                position: "absolute",
                top: positions[key].top,
                right: positions[key].right,
                transform: "translate(50%, -50%)",
                color: "green",
                fontSize: "16px",
                fontWeight: "bold",
                textAlign: "center",
                maxWidth: "130px",
                lineHeight: "1.4",
              }}
            >
              {showAnswers ? (
                <Typography
                  sx={{
                    color: "green",
                    fontSize: "15px",
                    fontWeight: "bold",
                    textAlign: "center",
                    maxWidth: "150px",
                    lineHeight: "1.2",
                  }}
                >
                  {correctAnswers4[key]}
                </Typography>
              ) : (
                <TextField
                  name={key}
                  variant="standard"
                  placeholder="............."
                  value={studentAnswers1[key]}
                  onChange={(e) =>
                    setStudentAnswers1({
                      ...studentAnswers1,
                      [key]: e.target.value,
                    })
                  }
                  InputProps={{
                    disableUnderline: true,
                  }}
                  inputProps={{
                    style: { textAlign: "right" },
                    dir: "rtl",
                  }}
                  sx={{
                    width: "90px",
                    height: "1px",
                    textAlign: "right",
                  }}
                />
              )}
            </Box>
          );
        })}
      </Box>
      <Box
        sx={{
          display: "flex",
          gap: 3,
          marginLeft: "700px",
          textAlign: "right",
        }}
      >
        <Button
          sx={{
            fontSize: "17px",
            padding: "12px 24px",
            backgroundColor: "#F6D339",
          }}
          variant="contained"
          onClick={resetAllInputs}
        >
          ÿ•ÿπÿßÿØÿ© ÿßŸÑŸÖÿ≠ÿßŸàŸÑÿ©
        </Button>
        <Button
          sx={{
            fontSize: "18px",
            padding: "12px 24px",
            backgroundColor: "#60B463",
          }}
          variant="contained"
          onClick={toggleAllAnswers}
        >
          ÿßŸÑÿ•ÿµŸÑÿßÿ≠
        </Button>
      </Box>
      <Typography
        variant="h4"
        sx={{
          textAlign: "right",
          fontWeight: "bold",
          mt: 3,
          marginRight: "30px",
          color: "red",
          direction: "rtl",
        }}
      >
        ÿßŸÑŸàÿ∂ÿπŸäÿ© ÿßŸÑÿßÿ≥ÿ™ŸÉÿ¥ÿßŸÅŸäÿ©:{" "}
      </Typography>
      <Typography
        variant="h6"
        sx={{
          textAlign: "right",
          fontWeight: "bold",
          mt: 3,
          marginRight: "30px",
          direction: "rtl",
        }}
      >
        ŸÜÿßŸÑ ÿ®ÿ±ŸÜÿßŸÖÿ¨ " ÿßŸÅÿ±ŸäŸÇŸäÿß ŸÖŸáÿØ ÿßŸÑÿ≠ÿ∂ÿßÿ±ÿßÿ™ ÿßŸÑÿπÿ±ŸäŸÇÿ©" ÿ•ÿπÿ¨ÿßÿ®ŸÉ ÿ£ŸÜÿ™ ŸàÿßÿÆŸàŸÉ ŸÅÿØÿπŸàÿ™ŸÖ ŸÉŸÑ
        ÿ£ŸÅÿ±ÿßÿØ ÿßŸÑÿπÿßÿ¶ŸÑÿ© ŸÑŸÖÿ¥ÿßŸáÿØÿ™Ÿá. ŸàŸÇÿØ ŸÉÿßŸÜÿ™ ÿßŸÑÿ≠ŸÑŸÇÿ© ÿßŸÑÿ´ÿßŸÜŸäÿ© ŸÖŸÜŸá ŸÖŸàÿßÿµŸÑÿ© ŸÑŸÑÿ≠ŸÑŸÇÿ© ÿßŸÑÿ£ŸàŸÑŸâ
        ŸÑŸÉŸÜ ÿ™ŸÜÿßŸàŸÑÿ™ Ÿáÿ∞Ÿá ÿßŸÑŸÖÿ±ÿ© ÿßŸÑÿÆÿµÿßÿ¶ÿµ ÿßŸÑŸÖŸÜÿßÿÆŸäÿ© ŸÑŸÖŸÜÿ∑ŸÇÿ© ÿßŸÑŸÖÿ∫ÿ±ÿ® ÿßŸÑÿπÿ±ÿ®Ÿä Ÿàÿ™ÿ£ÿ´Ÿäÿ±ÿßÿ™Ÿáÿß
        ÿπŸÑŸâ ÿßŸÑÿ∫ÿ∑ÿßÿ° ÿßŸÑŸÜÿ®ÿßÿ™Ÿä.
        <br />
        ŸÅÿµÿßÿ≠ ÿ£ÿÆŸàŸÉ ÿ£ÿ≠ŸÖÿØ ŸÖÿ™ÿπÿ¨ÿ®ÿß:{" "}
        <span style={{ color: "purple" }}>
          {" "}
          ŸáŸÑ ŸäÿÆÿ™ŸÑŸÅ ÿßŸÑŸÖŸÜÿßÿÆ ŸÖŸÜ ŸÖŸÜÿ∑ŸÇÿ© ÿßŸÑŸâ ÿ£ÿÆÿ±Ÿâ ŸÅŸä ÿßŸÑŸÖÿ∫ÿ±ÿ® ÿßŸÑÿπÿ±ÿ®Ÿä ŸàŸÉŸäŸÅ Ÿäÿ§ÿ´ÿ± ÿ∞ŸÑŸÉ ŸÅŸä
          ÿßŸÑÿ∫ÿ∑ÿßÿ° ÿßŸÑŸÜÿ®ÿßÿ™Ÿä Ÿäÿß ÿ™ÿ±Ÿâÿü{" "}
        </span>
        <br />
        ŸÅŸÇŸÑÿ™:
        ..................................................................................................{" "}
      </Typography>
      <Typography
        variant="h4"
        sx={{
          textAlign: "right",
          fontWeight: "bold",
          mt: 3,
          marginRight: "30px",
          color: "red",
          direction: "rtl",
        }}
      >
        ŸÖÿ±ÿ≠ŸÑÿ© ÿ±ÿµÿØ ÿßŸÑÿ™ÿµŸàÿ±ÿßÿ™:{" "}
      </Typography>
      <Typography
        variant="h6"
        sx={{
          textAlign: "right",
          fontWeight: "bold",
          mt: 3,
          marginRight: "30px",
          direction: "rtl",
        }}
      >
        ŸÇŸÖ ÿ®ŸÖÿ≥ÿßÿπÿØÿ© ÿ£ÿ≠ŸÖÿØ ŸÖŸÜ ÿÆŸÑÿßŸÑ ÿßŸÑÿ•ÿ¨ÿßÿ®ÿ© ÿπŸÜ ÿßŸÑÿ£ÿ≥ÿ¶ŸÑÿ© ÿßŸÑÿ™ÿßŸÑŸäÿ©:
        <br />
        ÿ®ŸÖÿß ÿ™ÿ™ŸÖŸäÿ≤ ŸÉŸÖŸäÿßÿ™ ÿßŸÑÿ£ŸÖÿ∑ÿßÿ± ÿ®ÿ®ŸÑÿØÿßŸÜ ÿßŸÑŸÖÿ∫ÿ±ÿ® ÿßŸÑÿπÿ±ÿ®Ÿäÿü
        <br />
        ŸÉŸäŸÅ ŸäŸÖŸÉŸÜ ÿ£ŸÜ Ÿäÿ§ÿ´ÿ± ÿ∞ŸÑŸÉ ÿπŸÑŸâ ÿßŸÑÿ∫ÿ∑ÿßÿ° ÿßŸÑŸÜÿ®ÿßÿ™Ÿäÿü
      </Typography>
      <Typography
        variant="h4"
        sx={{
          textAlign: "right",
          fontWeight: "bold",
          mt: 3,
          marginRight: "30px",
          color: "red",
          direction: "rtl",
        }}
      >
        ÿßŸÑÿ™ÿπŸÑŸÖ ÿßŸÑŸÖŸÜŸáÿ¨Ÿä:{" "}
      </Typography>
      <Typography
        variant="h6"
        sx={{
          textAlign: "right",
          fontWeight: "bold",
          mt: 3,
          marginRight: "30px",
          direction: "rtl",
        }}
      >
        ÿ£ÿ™ŸÄÿ£ŸÖŸÑ ÿßŸÑÿÆÿ±Ÿäÿ∑ÿ© ÿßŸÑÿ™ŸÅÿßÿπŸÑŸäÿ© ÿßŸÑÿ™ÿßŸÑŸäÿ© ÿ´ŸÖ ÿ£ÿπÿ∑Ÿä ŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™Ÿä:
      </Typography>
      <PrecipitationMap />
      <Typography
        variant="h6"
        sx={{
          textAlign: "right",
          fontWeight: "bold",
          color: "#9AC8EB",
          marginRight: "30px",
          marginTop: "100px",
          direction: "rtl", // Active la direction droite √† gauche
        }}
      >
        ŸÜÿ¥ÿßÿ∑: ÿ£ŸÉŸÖŸÑ ÿ™ÿπŸÖŸäÿ± ÿßŸÑÿ¨ÿØŸàŸÑ ÿßŸÑÿ™ÿßŸÑŸä ÿ®ÿßŸÑÿ±ÿ¨Ÿàÿπ ÿßŸÑŸâ ÿßŸÑÿÆÿ±Ÿäÿ∑ÿ© ÿßŸÑÿ™ŸÅÿßÿπŸÑŸäÿ©:{" "}
      </Typography>
    <PrecipitationTable/>
      <Typography
        variant="h4"
        sx={{
          textAlign: "right",
          fontWeight: "bold",
          mt: 3,
          marginRight: "30px",
          color: "red",
          direction: "rtl", // Active la direction droite √† gauche
        }}
      >
        ÿßŸÑŸàÿ∂ÿπŸäÿ© ÿßŸÑÿßÿ≥ÿ™ŸÉÿ¥ÿßŸÅŸäÿ© :
      </Typography>
      <Typography
        variant="h6"
        sx={{
          textAlign: "right",
          fontWeight: "bold",
          marginRight: "30px",
          marginTop: "30px",
          direction: "rtl", // Active la direction droite √† gauche
        }}
      >
        ÿ®ŸäŸÜŸÖÿß ŸÉÿßŸÜ ÿßŸÑÿ£ÿ® Ÿäÿ¨ŸÑÿ≥ ŸÅŸä ÿ∫ÿ±ŸÅÿ© ÿßŸÑŸÖÿπŸäÿ¥ÿ© Ÿäÿ™ÿµŸÅÿ≠ ÿßŸÑÿ¨ÿ±ŸäÿØÿ©ÿå ÿßŸÑÿ™ŸÅÿ™ÿ™ ÿ≥ŸÑŸÖŸâ ÿ®ŸÅÿ∂ŸàŸÑ ŸÜÿ≠Ÿà
        ÿßŸÑÿπŸÜŸàÿßŸÜ ÿßŸÑŸÉÿ®Ÿäÿ± ÿßŸÑÿ∞Ÿä ŸäÿπŸÑŸÜ ÿπŸÜ ÿ™ÿ≠ÿ∑ŸäŸÖ ÿ±ŸÇŸÖ ŸÇŸäÿßÿ≥Ÿä ÿ¨ÿØŸäÿØ ŸÅŸä ÿ™ÿ≥ŸÑŸÇ ŸÇŸÖÿ© ÿ¨ÿ®ŸÑ ÿßŸÑÿ£ŸÑÿ®.
        ŸàŸÖÿπ ÿßÿ¥ÿ™ÿπÿßŸÑ ÿ±Ÿàÿ≠ ÿßŸÑŸÖÿ∫ÿßŸÖÿ±ÿ© ÿ®ÿØÿßÿÆŸÑŸáÿßÿå ÿ≥ÿ£ŸÑÿ™Ÿá ÿ®ŸÅÿ∂ŸàŸÑ:ŸÖÿßÿ∞ÿß ÿπŸÜ ÿ®ÿßŸÇŸä ÿßŸÑÿ¨ÿ®ÿßŸÑ ÿ≠ŸàŸÑ
        ÿßŸÑÿπÿßŸÑŸÖÿü Ÿà ŸáŸÑ ÿ™Ÿàÿ¨ÿØ ÿ£ŸÜŸàÿßÿπ ÿ™ÿ∂ÿßÿ±Ÿäÿ≥ ÿ£ÿÆÿ±Ÿâ ÿ™ÿ¨ÿπŸÑ ŸÉŸàŸÉÿ®ŸÜÿß ŸÖÿ™ŸÜŸàÿπŸãÿß ŸàŸÖÿ´Ÿäÿ±Ÿãÿßÿü{" "}
      </Typography>
      <Typography
        variant="h4"
        sx={{
          textAlign: "right",
          fontWeight: "bold",
          mt: 3,
          marginRight: "30px",
          color: "red",
          direction: "rtl", // Active la direction droite √† gauche
        }}
      >
        ŸÖÿ±ÿ≠ŸÑÿ© ÿ±ÿµÿØ ÿßŸÑÿ™ÿµŸàÿ±ÿßÿ™: ÿ£ÿ≥ÿ¶ŸÑÿ© ŸÑÿßÿ≥ÿ™ŸÉÿ¥ÿßŸÅ ÿ£ŸÅŸÉÿßÿ± ÿßŸÑŸÖÿ™ÿπŸÑŸÖ
      </Typography>
      <Typography
        variant="h6"
        sx={{
          textAlign: "right",
          fontWeight: "bold",
          marginRight: "30px",
          marginTop: "30px",
          direction: "rtl", // Active la direction droite √† gauche
        }}
      >
        Ÿà ÿ£ŸÜÿ™ÿå ŸÖÿß ŸáŸä ÿßŸÑÿ¨ÿ®ÿßŸÑ ÿßŸÑÿ™Ÿä ÿ™ÿπÿ±ŸÅŸáÿß ÿ≠ŸàŸÑ ÿßŸÑÿπÿßŸÑŸÖÿü ŸàŸáŸÑ ÿ™ÿ±Ÿâ ÿ£ŸÜ ŸáŸÜÿßŸÉ ÿ£ŸÜŸàÿßÿπ ÿ™ÿ∂ÿßÿ±Ÿäÿ≥
        ÿ£ÿÆÿ±Ÿâ ÿ™Ÿèÿ≥ŸáŸÖ ŸÅŸä ÿ¨ÿπŸÑ ŸÉŸàŸÉÿ®ŸÜÿß ÿ£ŸÉÿ´ÿ± ÿ™ŸÜŸàÿπŸãÿßÿü
      </Typography>
      <Typography
        variant="h4"
        sx={{
          textAlign: "right",
          fontWeight: "bold",
          mt: 3,
          marginRight: "30px",
          color: "red",
          direction: "rtl", // Active la direction droite √† gauche
        }}
      >
        ŸÖÿ±ÿ≠ŸÑÿ© ÿßŸÑÿ™ÿπŸÑŸÖ ÿßŸÑŸÖŸÜŸáÿ¨Ÿä: "ÿßÿ≥ÿ™ŸÉÿ¥ÿßŸÅ ÿÆÿ±Ÿäÿ∑ÿ© ÿßŸÑÿπÿßŸÑŸÖ"
      </Typography>
      <Typography
        variant="h6"
        sx={{
          textAlign: "right",
          fontWeight: "bold",
          marginRight: "30px",
          marginTop: "30px",
          direction: "rtl", // Active la direction droite √† gauche
        }}
      >
        ÿ™ÿπŸÑŸäŸÖÿ©: ÿßÿ≥ÿ™ŸÉÿ¥ŸÅ ÿßŸÑŸàÿ≠ÿØÿßÿ™ ÿßŸÑÿ™ÿ∂ÿßÿ±Ÿäÿ≥Ÿäÿ© ÿßŸÑŸÉÿ®ÿ±Ÿâ ÿπŸÑŸâ ÿßŸÑÿÆÿ±Ÿäÿ∑ÿ©!
        <ul>
          <li>ÿßŸÜÿ∏ÿ± ÿ•ŸÑŸâ ÿßŸÑÿÆÿ±Ÿäÿ∑ÿ© Ÿàÿ≠ÿØÿØ ŸÖŸÜÿßÿ∑ŸÇ ÿßŸÑÿ¨ÿ®ÿßŸÑÿå ÿßŸÑŸáÿ∂ÿßÿ®ÿå ŸàÿßŸÑÿ≥ŸáŸàŸÑ.</li>
          <li> ÿßÿ≥ÿ™ÿÆÿØŸÖ ÿÆÿßÿµŸäÿ© ÿßŸÑÿ™ŸÉÿ®Ÿäÿ± ŸÑÿ™ŸÅÿ≠ÿµ ÿßŸÑÿ™ŸÅÿßÿµŸäŸÑ ÿßŸÑÿØŸÇŸäŸÇÿ© ŸÑŸÉŸÑ Ÿàÿ≠ÿØÿ©.</li>
          <li> ŸÇŸÖ ÿ®ÿ™ÿ≥ÿ¨ŸäŸÑ ÿ£ÿ®ÿ±ÿ≤ ÿßŸÑÿ£ÿ≥ŸÖÿßÿ° ÿßŸÑÿÆÿßÿµÿ© ÿ®ŸÉŸÑ ŸÜŸàÿπ ŸÖŸÜ ÿßŸÑÿ™ÿ∂ÿßÿ±Ÿäÿ≥.</li>
        </ul>
      </Typography>
      <WorldMap1 />
      {/* Image with Overlay */}
      <Typography
        variant="h6"
        sx={{
          textAlign: "right",
          fontWeight: "bold",
          mt: 3,
          marginRight: "35px",
          direction: "rtl", // Active la direction droite √† gauche
        }}
      >
        {" "}
        1 ) ŸÇŸÖ ÿ®ÿ™ŸàÿµŸäŸÑ ŸÉŸÑ Ÿáÿ∂ÿ®ÿ© ÿ®ÿßŸÑŸÇÿßÿ±ÿ© ÿßŸÑÿ™Ÿä ÿ™ŸÇÿπ ÿ∂ŸÖŸÜŸáÿß.
      </Typography>
      <div class="MuiBox-root css-1c2mhw6">
        <div
          style={{
            marginTop: "1000px",

            maxWidth: "1000px", // Largeur augment√©e
            alignItems: "center", // Centrage global
            direction: "rtl",
            fontFamily: "Arial, sans-serif",
            margin: "0 auto",
            padding: "20px",
            position: "relative",
          }}
        >
          <div
            style={{
              display: "flex",
              position: "relative",
              minHeight: "250px",
              gap: "250px", // Grand espace entre colonnes
              justifyContent: "center", // Centrage horizontal
            }}
          >
            {/* Colonne de droite - ÿßŸÑÿØŸàÿßŸÅÿπ */}
            <div
              style={{
                width: "200px", // Largeur fixe
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
              }}
            >
              {motivations.map((motivation, index) => (
                <div
                  key={index}
                  style={{
                    padding: "15px",
                    margin: "10px 0",
                    backgroundColor: "#f8f9fa",
                    borderRadius: "8px",
                    textAlign: "center",
                    position: "relative",
                  }}
                >
                  {motivation}
                </div>
              ))}
            </div>

            {/* Colonne de gauche - ÿßŸÑÿ£ÿ≥ÿ®ÿßÿ® */}
            <div
              style={{
                width: "300px", // Largeur fixe
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
              }}
            >
              {reasons.map((reason, index) => (
                <div
                  key={index}
                  style={{
                    padding: "15px",
                    margin: "10px 0",
                    backgroundColor: "#f8f9fa",
                    borderRadius: "8px",
                    textAlign: "center",
                    position: "relative",
                  }}
                >
                  {reason}
                </div>
              ))}
            </div>

            {/* Fl√®ches SVG inclin√©es */}
            <AnimatePresence>
              {showArrows && (
                <div
                  style={{
                    position: "absolute",
                    top: 0,
                    left: 0,
                    right: 0,
                    bottom: 0,
                    pointerEvents: "none",
                  }}
                >
                  {arrowsConfig.map((arrow, index) => (
                    <motion.svg
                      key={index}
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      exit={{ opacity: 0 }}
                      transition={{ delay: index * 0.2 }}
                      style={{
                        position: "absolute",
                        left: "50%",
                        top: arrow.startY,
                        transform: `translate(-50%, -50%) rotate(${arrow.angle}deg)`,
                        overflow: "visible",
                      }}
                      width="150"
                      height="40"
                      viewBox="0 0 150 40"
                    >
                      <path
                        d={`M0,20 L${arrow.length - 30},20 L${
                          arrow.length - 40
                        },5 L${arrow.length},20 L${arrow.length - 40},35 L${
                          arrow.length - 30
                        },20`}
                        fill="#60B463"
                        stroke="#4a8a4d"
                        strokeWidth="1"
                      />
                    </motion.svg>
                  ))}
                </div>
              )}
            </AnimatePresence>
          </div>

          <div
            style={{
              display: "flex",
              justifyContent: "center",
              gap: "20px",
            }}
          >
            <Button
              sx={{
                fontSize: "17px",
                padding: "12px 24px",
                backgroundColor: "#F6D339",
                "&:hover": { backgroundColor: "#e6c233" },
                fontWeight: "bold",
              }}
              variant="contained"
              onClick={() => setShowArrows(false)}
            >
              ÿ•ÿπÿßÿØÿ© ÿßŸÑŸÖÿ≠ÿßŸàŸÑÿ©
            </Button>
            <Button
              sx={{
                fontSize: "18px",
                padding: "12px 24px",
                backgroundColor: "#60B463",
                "&:hover": { backgroundColor: "#4fa352" },
                fontWeight: "bold",
              }}
              variant="contained"
              onClick={() => setShowArrows(true)}
            >
              ÿßŸÑÿ•ÿµŸÑÿßÿ≠
            </Button>
          </div>
        </div>{" "}
      </div>
      {/* Single Buttons for the Entire Exercise */}
      <Typography
        variant="h4"
        sx={{
          textAlign: "right",
          fontWeight: "bold",
          mt: 3,
          marginRight: "30px",
          color: "red",
        }}
      >
        ŸÖÿ±ÿ≠ŸÑÿ© ÿßŸÑÿ™ÿØÿ±Ÿäÿ®{" "}
      </Typography>
      <Typography
        variant="h6"
        sx={{
          textAlign: "right",
          fontWeight: "bold",
          mt: 3,
          marginRight: "35px",
          direction: "rtl", // Active la direction droite √† gauche
        }}
      >
        2) ÿ£ÿ±ÿ®ÿ∑ ÿßŸÑÿ≥ŸÑÿ≥ŸÑÿ© ÿßŸÑÿ¨ÿ®ŸÑŸäÿ© ÿ®ŸÖŸàŸÇÿπŸáÿß Ÿà ÿ£ÿπŸÑŸâ ŸÇŸÖÿ© ŸÅŸäŸáÿß :
      </Typography>
      <div
        style={{
          maxWidth: "1000px",
          direction: "rtl",
          fontFamily: "Arial, sans-serif",
          margin: "0 auto",
          padding: "20px",
          position: "relative",
        }}
      >
        <div
          style={{
            display: "flex",
            position: "relative",
            minHeight: "300px",
            gap: "100px",
            justifyContent: "center",
            alignItems: "center",
          }}
        >
          <div
            style={{
              width: "200px",
              display: "flex",
              flexDirection: "column",
              alignItems: "center",
            }}
          >
            {columns[0].map((item, index) => (
              <div
                key={index}
                style={{
                  padding: "15px",
                  margin: "10px 0",
                  backgroundColor: "#f8f9fa",
                  borderRadius: "8px",
                  textAlign: "center",
                  width: "100%",
                }}
              >
                {item}
              </div>
            ))}
          </div>

          <div
            style={{
              width: "200px",
              display: "flex",
              flexDirection: "column",
              alignItems: "center",
            }}
          >
            {columns[1].map((item, index) => (
              <div
                key={index}
                style={{
                  padding: "15px",
                  margin: "10px 0",
                  backgroundColor: "#f8f9fa",
                  borderRadius: "8px",
                  textAlign: "center",
                  width: "100%",
                }}
              >
                {item}
              </div>
            ))}
          </div>

          <div
            style={{
              width: "200px",
              display: "flex",
              flexDirection: "column",
              alignItems: "center",
            }}
          >
            {columns[2].map((item, index) => (
              <div
                key={index}
                style={{
                  padding: "15px",
                  margin: "10px 0",
                  backgroundColor: "#f8f9fa",
                  borderRadius: "8px",
                  textAlign: "center",
                  width: "100%",
                }}
              >
                {item}
              </div>
            ))}
          </div>

          <AnimatePresence>
            {showArrows && (
              <div
                style={{
                  position: "absolute",
                  top: 0,
                  left: 0,
                  right: 0,
                  bottom: 0,
                  pointerEvents: "none",
                }}
              >
                {arrowsConfig1.map((arrow, index) => (
                  <motion.svg
                    key={`arrow1-${index}`}
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    exit={{ opacity: 0 }}
                    style={{
                      position: "absolute",
                      left: "35%",
                      top: arrow.startY,
                      transform: `translate(-50%, -50%) rotate(${arrow.angle}deg)`,
                      overflow: "visible",
                    }}
                    width="100"
                    height="20"
                    viewBox="0 0 100 20"
                  >
                    <path
                      d={`M0,20 L${arrow.length - 30},20 L${
                        arrow.length - 40
                      },5 L${arrow.length},20 L${arrow.length - 40},35 L${
                        arrow.length - 30
                      },20`}
                      fill="#60B463"
                      stroke="#4a8a4d"
                      strokeWidth="1"
                    />
                  </motion.svg>
                ))}

                {arrowsConfig2.map((arrow, index) => (
                  <motion.svg
                    key={`arrow2-${index}`}
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    exit={{ opacity: 0 }}
                    style={{
                      position: "absolute",
                      left: "75%",
                      top: arrow.startY,
                      transform: `translate(-50%, -50%) rotate(${arrow.angle}deg)`,
                      overflow: "visible",
                    }}
                    width="100"
                    height="20"
                    viewBox="0 0 100 20"
                  >
                    <path
                      d={`M0,20 L${arrow.length - 30},20 L${
                        arrow.length - 40
                      },5 L${arrow.length},20 L${arrow.length - 40},35 L${
                        arrow.length - 30
                      },20`}
                      fill="#60B463"
                      stroke="#4a8a4d"
                      strokeWidth="1"
                    />
                  </motion.svg>
                ))}
              </div>
            )}
          </AnimatePresence>
        </div>

        <div
          style={{
            display: "flex",
            justifyContent: "center",
            gap: "20px",
            marginTop: "30px",
          }}
        >
          <Button
            sx={{
              fontSize: "17px",
              padding: "12px 24px",
              backgroundColor: "#F6D339",
              "&:hover": { backgroundColor: "#e6c233" },
              fontWeight: "bold",
            }}
            variant="contained"
            onClick={() => setShowArrows(false)}
          >
            ÿ•ÿπÿßÿØÿ© ÿßŸÑŸÖÿ≠ÿßŸàŸÑÿ©
          </Button>
          <Button
            sx={{
              fontSize: "18px",
              padding: "12px 24px",
              backgroundColor: "#60B463",
              "&:hover": { backgroundColor: "#4fa352" },
              fontWeight: "bold",
            }}
            variant="contained"
            onClick={() => setShowArrows(true)}
          >
            ÿßŸÑÿ•ÿµŸÑÿßÿ≠
          </Button>
        </div>
      </div>
      {/*       <MountainTable/>
       */}{" "}
      <Typography
        variant="h4"
        sx={{
          textAlign: "right",
          fontWeight: "bold",
          mt: 3,
          marginRight: "30px",
          color: "red",
        }}
      >
        ŸÖÿ±ÿ≠ŸÑÿ© ÿßŸÑÿ™ŸÇŸäŸäŸÖ{" "}
      </Typography>
      <Typography
        variant="h6"
        sx={{
          textAlign: "right",
          fontWeight: "bold",
          mt: 3,
          marginRight: "35px",
          direction: "rtl", // Active la direction droite √† gauche
        }}
      >
        ÿ≥ÿ§ÿßŸÑ ŸÖÿ™ÿπÿØÿØ ÿßŸÑÿßÿÆÿ™Ÿäÿßÿ±ÿßÿ™ :
      </Typography>
      <Typography
        variant="h6"
        sx={{
          textAlign: "right",
          fontWeight: "bold",
          marginRight: "35px",
          direction: "rtl", // Active la direction droite √† gauche
        }}
      >
        {questions1.map((q, qIndex) => (
          <div key={qIndex} className="card mb-3">
            <div className="card-body">
              <h5 className="card-title">
                {qIndex + 1}- {q.question}
              </h5>
              {q.options.map((option, optionIndex) => (
                <div key={optionIndex} className="form-check">
                  <input
                    className="form-check-input"
                    type="radio"
                    name={`question-${qIndex}`}
                    checked={selectedAnswers[qIndex] === optionIndex}
                    onChange={() => handleSelect(qIndex, optionIndex)}
                  />
                  <label className="form-check-label">{option}</label>
                </div>
              ))}
              {showCorrection && (
                <p
                  style={{
                    marginTop: "2px",
                    color: "green",
                    fontSize: "18px",
                    direction: "rtl",
                    fontWeight: "bold",
                  }}
                >
                  ÿßŸÑÿ•ÿ¨ÿßÿ®ÿ© ÿßŸÑÿµÿ≠Ÿäÿ≠ÿ©: {q.options[q.correct]}
                </p>
              )}
            </div>
          </div>
        ))}

        <Button
          sx={{
            fontSize: "18px",
            mt: "3px",
            padding: "12px 24px",
            backgroundColor: "#60B463",
            "&:hover": { backgroundColor: "#4fa352" },
            fontWeight: "bold",
          }}
          variant="contained"
          onClick={() => setShowCorrection(true)}
        >
          ÿßŸÑÿ•ÿµŸÑÿßÿ≠
        </Button>
      </Typography>
    </Container>
  );
};

export default Course;
